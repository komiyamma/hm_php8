/* mytest extension for PHP */
#define ZEND_DEBUG 0

/* hidemaru extension for PHP */

// そうである

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif

#include "php.h"
#include "ext/standard/info.h"
#include "php_hidemaru.h"
#include "hidemaru_arginfo.h"
#include "convert_string.h"
#include "hidemaru_interface.h"
#include "hidemaruexe_export.h"
#include "hm_original_encode_mapfunc.h"
#include "output_debugstream.h"

/* For compatibility with older PHP versions */
#ifndef ZEND_PARSE_PARAMETERS_NONE
#define ZEND_PARSE_PARAMETERS_NONE() \
	ZEND_PARSE_PARAMETERS_START(0, 0) \
	ZEND_PARSE_PARAMETERS_END()
#endif

/* {{{ void test1() */
PHP_FUNCTION(test1)
{
	ZEND_PARSE_PARAMETERS_NONE();

	php_printf("The extension %s is loaded and working!\r\n", "hidemaru");
}
/* }}} */


/* {{{ string test2( [ string $var ] ) */
// PHP_FUNCTION(test2)
// {
// 	auto str = getaaa();
// 	char *var = (char *)str.c_str();
// 	size_t var_len = str.length() - 1;
// 	zend_string *retval;

// 	ZEND_PARSE_PARAMETERS_START(0, 1)
// 		Z_PARAM_OPTIONAL
// 		Z_PARAM_STRING(var, var_len)
// 	ZEND_PARSE_PARAMETERS_END();

// 	retval = strpprintf(0, "Hello %s", var);

// 	RETURN_STR(retval);
// }
/* }}}*/

/* {{{ double hidemaru_version() */
PHP_FUNCTION(hidemaru_version)
{
	ZEND_PARSE_PARAMETERS_NONE();

	double ret_var = CHidemaruExeExport::hm_version;

	RETURN_DOUBLE(ret_var);
}

/* {{{ void hidemaru_debuginfo( [ string $var ] ) */
PHP_FUNCTION(hidemaru_debuginfo)
{
	char* var = NULL;
	size_t var_size;

	ZEND_PARSE_PARAMETERS_START(1, 1)
		Z_PARAM_STRING(var, var_size)
	ZEND_PARSE_PARAMETERS_END();

	wstring utf16_value = utf8_to_utf16(var);
	OutputDebugStream(utf16_value.c_str());
}
/* }}}*/


/* {{{ string hidemaru_edit_filepath() */
PHP_FUNCTION(hidemaru_edit_filepath)
{
	ZEND_PARSE_PARAMETERS_NONE();

	const int WM_USER = 0x400;
	const int WM_HIDEMARUINFO = WM_USER + 181;
	const int HIDEMARUINFO_GETFILEFULLPATH = 4;
	HWND hWndHidemaru = CHidemaruExeExport::Hidemaru_GetCurrentWindowHandle();
	if (hWndHidemaru) {
		wchar_t filepath[MAX_PATH*3];
		int cwch = SendMessageW(hWndHidemaru, WM_HIDEMARUINFO, HIDEMARUINFO_GETFILEFULLPATH, (LPARAM)filepath);
		string utf8_filepath = utf16_to_utf8(filepath);
		RETURN_STRING(utf8_filepath.c_str());
	}

	RETURN_STRING("");
}
/* }}}*/


/* {{{ string hidemaru_edit_totaltext() */
PHP_FUNCTION(hidemaru_edit_totaltext)
{
	ZEND_PARSE_PARAMETERS_NONE();

	wstring utf16_totaltext = CHidemaruExeExport::GetTotalText();
	string utf8_totaltext = utf16_to_utf8(utf16_totaltext);
	RETURN_STRING(utf8_totaltext.c_str());
}
/* }}}*/

/* {{{ string hidemaru_edit_selectedtext() */
PHP_FUNCTION(hidemaru_edit_selectedtext)
{
	ZEND_PARSE_PARAMETERS_NONE();

	wstring utf16_selectedtext = CHidemaruExeExport::GetSelectedText();
	string utf8_selectedtext = utf16_to_utf8(utf16_selectedtext);

	RETURN_STRING(utf8_selectedtext.c_str());
}
/* }}}*/

/* {{{ string hidemaru_edit_linetext() */
PHP_FUNCTION(hidemaru_edit_linetext)
{
	ZEND_PARSE_PARAMETERS_NONE();

	wstring utf16_linetext = CHidemaruExeExport::GetLineText();
	string utf8_linetext = utf16_to_utf8(utf16_linetext);

	RETURN_STRING(utf8_linetext.c_str());
}
/* }}}*/

/* {{{ bool hidemaru_outputpane_output( [ string $var ] ) */
PHP_FUNCTION(hidemaru_outputpane_output)
{
	char* var = NULL;
	size_t var_size;

	ZEND_PARSE_PARAMETERS_START(1, 1)
		Z_PARAM_STRING(var, var_size)
	ZEND_PARSE_PARAMETERS_END();

	// ちゃんと関数がある時だけ
	if (CHidemaruExeExport::Hidemaru_GetCurrentWindowHandle) {
		HWND hHidemaruWindow = CHidemaruExeExport::Hidemaru_GetCurrentWindowHandle();
		if (CHidemaruExeExport::HmOutputPane_Output) {

			wstring utf16_value = utf8_to_utf16(var);

			auto encode_byte_data = EncodeWStringToOriginalEncodeVector(utf16_value);
			BOOL result = CHidemaruExeExport::HmOutputPane_Output(hHidemaruWindow, encode_byte_data.data());
			if (result) {
				RETURN_TRUE;
			}
			else {
				RETURN_FALSE;
			}

		}
	}

	RETURN_FALSE;
}
/* }}}*/

/* {{{ bool hidemaru_outputpane_push() */
PHP_FUNCTION(hidemaru_outputpane_push)
{
	ZEND_PARSE_PARAMETERS_NONE();

	// ちゃんと関数がある時だけ
	if (CHidemaruExeExport::Hidemaru_GetCurrentWindowHandle) {
		HWND hHidemaruWindow = CHidemaruExeExport::Hidemaru_GetCurrentWindowHandle();
		if (CHidemaruExeExport::HmOutputPane_Push) {

			BOOL result = CHidemaruExeExport::HmOutputPane_Push(hHidemaruWindow);
			if (result) {
				RETURN_TRUE;
			}
			else {
				RETURN_FALSE;
			}

		}
	}

	RETURN_FALSE;
}
/* }}}*/

/* {{{ bool hidemaru_outputpane_pop() */
PHP_FUNCTION(hidemaru_outputpane_pop)
{
	ZEND_PARSE_PARAMETERS_NONE();

	// ちゃんと関数がある時だけ
	if (CHidemaruExeExport::Hidemaru_GetCurrentWindowHandle) {
		HWND hHidemaruWindow = CHidemaruExeExport::Hidemaru_GetCurrentWindowHandle();
		if (CHidemaruExeExport::HmOutputPane_Pop) {

			BOOL result = CHidemaruExeExport::HmOutputPane_Pop(hHidemaruWindow);
			if (result) {
				RETURN_TRUE;
			}
			else {
				RETURN_FALSE;
			}

		}
	}

	RETURN_FALSE;
}
/* }}}*/

// アウトプットパネルのハンドルの取得  (この関数はPHP層へは公開していない)
static HWND OutputPane_GetWindowHanndle() {

	// ちゃんと関数がある時だけ
	if (CHidemaruExeExport::Hidemaru_GetCurrentWindowHandle) {
		HWND hHidemaruWindow = CHidemaruExeExport::Hidemaru_GetCurrentWindowHandle();
		if (CHidemaruExeExport::HmOutputPane_GetWindowHandle) {
			return CHidemaruExeExport::HmOutputPane_GetWindowHandle(hHidemaruWindow);
		}
	}

	return NULL;
}

/* {{{ int hidemaru_outputpane_sendmessage( [int $var] ) */
PHP_FUNCTION(hidemaru_outputpane_sendmessage)
{
	zend_long var;

	ZEND_PARSE_PARAMETERS_START(1, 1)
		Z_PARAM_LONG(var)
	ZEND_PARSE_PARAMETERS_END();

	zend_long retval = 0;

	// ちゃんと関数がある時だけ
	HWND OutputWindowHandle = OutputPane_GetWindowHanndle();
	if (OutputWindowHandle) {
		// (#h,0x111/*WM_COMMAND*/,1009,0); //1009=クリア
		// 0x111 = WM_COMMAND
		zend_long command_id = var;
		LRESULT r = SendMessageW(OutputWindowHandle, 0x111, command_id, 0);
		retval = r;
		RETURN_LONG(retval);
	}

	RETURN_LONG(0);
}
/* }}}*/

/* {{{ int hidemaru_outputpane_sendmessage() */
PHP_FUNCTION(hidemaru_outputpane_clear)
{
	ZEND_PARSE_PARAMETERS_NONE();

	zend_long retval = 0;

	// ちゃんと関数がある時だけ
	HWND OutputWindowHandle = OutputPane_GetWindowHanndle();
	if (OutputWindowHandle) {
		// (#h,0x111/*WM_COMMAND*/,1009,0); //1009=クリア
		// 0x111 = WM_COMMAND
		zend_long command_id = 1009;
		LRESULT r = SendMessageW(OutputWindowHandle, 0x111, command_id, 0);
		retval = r;
		RETURN_LONG(retval);
	}

	RETURN_LONG(0);
}
/* }}}*/


/*
* 
RETURN_RESOURCE(l)
RETURN_BOOL(b)
RETURN_NULL()
RETURN_LONG(l)
RETURN_DOUBLE(d)
RETURN_STRING(s, dup)
RETURN_STRINGL(s, l, dup)
RETURN_EMPTY_STRING()
RETURN_FALSE
RETURN_TRUE
*/

/* {{{ PHP_RINIT_FUNCTION */
PHP_RINIT_FUNCTION(hidemaru)
{
#if defined(ZTS) && defined(COMPILE_DL_HIDEMARU)
	ZEND_TSRMLS_CACHE_UPDATE();
#endif
	MessageBox(NULL, L"CHidemaruExeExport::init()", L"CHidemaruExeExport::init()", NULL);
	CHidemaruExeExport::init();

	return SUCCESS;
}
/* }}} */

/* {{{ PHP_MINFO_FUNCTION */
PHP_MINFO_FUNCTION(hidemaru)
{
	php_info_print_table_start();
	php_info_print_table_header(2, "hidemaru support", "enabled");
	php_info_print_table_end();
}
/* }}} */

/* {{{ hidemaru_module_entry */
zend_module_entry hidemaru_module_entry = {
	STANDARD_MODULE_HEADER,
	"hidemaru",					/* Extension name */
	ext_functions,					/* zend_function_entry */
	NULL,							/* PHP_MINIT - Module initialization */
	NULL,							/* PHP_MSHUTDOWN - Module shutdown */
	PHP_RINIT(hidemaru),			/* PHP_RINIT - Request initialization */
	NULL,							/* PHP_RSHUTDOWN - Request shutdown */
	PHP_MINFO(hidemaru),			/* PHP_MINFO - Module info */
	PHP_HIDEMARU_VERSION,		/* Version */
	STANDARD_MODULE_PROPERTIES
};
/* }}} */

#ifdef COMPILE_DL_HIDEMARU
# ifdef ZTS
ZEND_TSRMLS_CACHE_DEFINE()
# endif
ZEND_GET_MODULE(hidemaru)
#endif


//--------------------------------------------------------------------------------

